#!/bin/csh

# This script builds an MPAS stand-alone kernel.
#
### Apologies for use of csh, this was inherited. ###
#
# Usage: Execute this script with the "-help" option.  
#
# With arguments, checks validity of settings and sets arch and 
# buildroot.  It then writes a file to be sourced (module_setup), and runs 
# make. Current  defaults are: 
#    arch=intel threading=no chunk=no nz=no 
#    translatei=auto fpmp=yes iinside=no buildroot=..
#
# Note that when threading=yes the default value for chunk=8 (otherwise only 
# one thread would have any work to do).  
#
# The translatei option is only used for performance tuning experiments and 
# should never be changed from its default for production runs.  
#
# fpmp=no turns off "-fp-model precise" for ifort builds.  This is used for 
# performance tuning and may be made the default if model the can be validated 
# without it.  fpmp should only be set to a non-default value for ifort builds.
# fpmp is ignored for non-ifort builds.  
#
# iinside=yes builds with variants of nislfv_rain_plm*() routines that have 
# i-on-the-inside within their "intp" loops.  This is an optimization by John 
# Michalakes from his work on WSM5.  It appears to be slower than the 
# alternative when my translation of k loop and memory bounds to literal 
# constants is turned on.  More work is needed to solidify this result and its 
# cause(s) (use of real data sets from MPAS instread of idealized data sets 
# from NIM, etc. etc.).  
#
# "makekernel clean" removes any src_* directories (created by earlier 
# invocations of "makekernel") in the parent directory.  It is not supported in 
# combination with a "buildroot" argument. 

set validarch = (intel lahey pgi zeusintel zeuslahey sjetintel titanintel titancray tacc taccxeonphi ysintel m1intel m1xeonphi m2intel m2xeonphi eosintel endeavorintel endeavorhswep endeavorxeonphi)
set validthreading = (yes no)
set validchunk = (no)   # or a non-negative integer, "0"=="no"
set validnz = (no)      # or a non-negative integer, "0"=="no"
set validtranslatei = (auto no)
set validfpmp = (yes no)
set validiinside = (no yes)
set thisscript = $0
set srcdir = $cwd

# Set messages to be printed on request or given bad input
set usemsg = "Usage: $thisscript [clean] [-*help] [arch=?] [threading=?] [chunk=?] [nz=?] [translatei=?] [fpmp=?] [iinside=?] [buildroot=dir]"
set usemsg_clean     = "clean means blow away all builds"
set usemsg_help      = "help or -help or --help prints a verbose use message"
set usemsg_arch      = "arch=[one of: $validarch]"
set usemsg_threading = "threading=[one of: $validthreading]"
set usemsg_chunk     = "chunk=[one of: $validchunk or a non-negative integer]"
set usemsg_nz        = "nz=[one of: $validnz or a non-negative integer], chunk must be set whenever nz is set"
set usemsg_translatei = "translatei=[one of: $validtranslatei]"
set usemsg_fpmp = "fpmp=[one of: $validfpmp]"
set usemsg_iinside = "iinside=[one of: $validiinside]"
set usemsg_buildroot = "buildroot=[dir_to_build (default is $cwd:h)]"

# makekernel must be run from the src directory
if ($cwd:t != src || ! -d kernel || ! -d tools) then
  echo "${thisscript}: MUST be run from NIM src directory! $srcdir looks suspicious"
  exit 1
endif

# Special cases of "makekernel clean" and "makekernel -*help"
if ($#argv == 1) then
  if ($argv[1] == "clean") then
    set cmd = 'rm -rf ../src_*'
    echo "Executing $cmd..."
    $cmd
    exit 0
  else if ($argv[1] == "-help" || $argv[1] == "--help" || $argv[1] == "help") then
    echo "Usage: $usemsg"
    echo '      ' $usemsg_clean
    echo '      ' $usemsg_help
    echo '      ' $usemsg_arch
    echo '      ' $usemsg_threading
    echo '      ' $usemsg_chunk
    echo '      ' $usemsg_nz
    echo '      ' $usemsg_translatei
    echo '      ' $usemsg_fpmp
    echo '      ' $usemsg_iinside
    echo '      ' $usemsg_buildroot
    exit 0
  endif
endif

# Parse arg list for presence of key=value pairs. 
# Of course csh does not have getopt.  

while ($#argv)
# Throw away what comes after "=" to get the key
  set key = `echo $1 | sed 's/=.*$//'`
# Throw away what comes before "=" to get the value
  set val = `echo $1 | sed 's/.*=//'`
  if ($key == "" || $val == "") then
    echo "Cannot parse arg list: For help run: $thisscript -help"
    exit 1
  endif
  if ($key != "arch" && $key != "buildroot" && $key != "threading" && $key != "chunk" && $key != "nz" && $key != "translatei" && $key != "fpmp" && $key != "iinside" ) then
    echo "key=value not found or LHS of = must be one of arch|buildroot|threading|chunk|nz|translatei|fpmp|iinside"
    echo "For help run: $thisscript -help"
    exit 1
  endif

# Check validity of input. csh lack of functions is beyond ridiculous.  
  if ($key == "arch") then
    set validopts = ($validarch)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown arch: Need arch=[one of: $validarch]"
      exit 1
    endif
  else if ($key == "threading") then
    set validopts = ($validthreading)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown threading: Need threading=[one of: $validthreading]"
      exit 1
    endif
  else if ($key == "chunk") then
    set validopts = ($validchunk)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      # Is $val a valid positive non-octal integer?  
      echo $val | egrep '^[1-9]+[0-9]*$' > /dev/null
      if ( $status ) then
        echo "$val is an unknown chunk: Need chunk=[one of: $validchunk] or a positive non-octal integer"
        exit 1
      endif
    endif
  else if ($key == "nz") then
    set validopts = ($validnz)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      # Is $val a valid positive non-octal integer?  
      echo $val | egrep '^[1-9]+[0-9]*$' > /dev/null
      if ( $status ) then
        echo "$val is an unknown nz: Need nz=[one of: $validnz] or a positive non-octal integer"
        exit 1
      endif
    endif
  else if ($key == "translatei") then
    set validopts = ($validtranslatei)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown translatei: Need translatei=[one of: $validtranslatei]"
      exit 1
    endif
  else if ($key == "fpmp") then
    set validopts = ($validfpmp)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown fpmp: Need fpmp=[one of: $validfpmp]"
      exit 1
    endif
  else if ($key == "iinside") then
    set validopts = ($validiinside)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown iinside: Need iinside=[one of: $validiinside]"
      exit 1
    endif
  else if ($key == "buildroot") then
    if (! -d $val) then
      echo "$val is not a directory: Need buildroot=[valid_directory]"
      exit 1
    endif
  endif
  eval "set $key = $val"
  shift argv
end

# Determine architecture if not set on cmd line. 
if ( ! $?arch ) then
  echo "You must set arch=[one of: $validarch]"
  echo "For help run: $thisscript -help"
  exit 1
endif
echo "Using arch = $arch"
echo ""

# Determine threading if not set on cmd line
if ( ! $?threading ) then
  echo "You must set threading=[one of: $validthreading]"
  echo "For help run: $thisscript -help"
  exit 1
endif
echo "Using threading = $threading"
echo ""

# Determine build root.  Use default if not specified on command-line.  
if ( ! $?buildroot) then
  set buildroot = `cd .. && echo $cwd`
endif

# Determine chunk.  Use default if not specified on command-line.
# When threading is turned on, default value is 8.  
if ( ! $?chunk ) then
  set chunk = $validchunk[1]
  if ($threading == 'yes') then
    set chunk = 8
  endif
endif

# Determine nz.  Use default if not specified on command-line.  
if ( ! $?nz ) then
  set nz = $validnz[1]
endif

# Determine translatei.  Use default if not specified on command-line.  
if ( ! $?translatei ) then
  set translatei = $validtranslatei[1]
endif

# Determine fpmp.  Use default if not specified on command-line.  
if ( ! $?fpmp ) then
  set fpmp = $validfpmp[1]
endif

# Determine iinside.  Use default if not specified on command-line.  
if ( ! $?iinside ) then
  set iinside = $validiinside[1]
endif

# Set objdir (where "make" is run) and rundir (where run scripts are put) 
# based on $arch and $buildroot. 

if ($chunk == 'no') then
  set chunktype = ""
else
  set chunktype = "_CHUNK${chunk}"
endif

if ($nz == 'no') then
  set nztype = ""
else
  set nztype = "_NZ${nz}"
endif

if ($translatei == 'no') then
  set translateitype = "_XLATEI${translatei}"
else
  set translateitype = ""
endif

if ($fpmp == 'no') then
  set fpmptype = "_FPMP${fpmp}"
else
  set fpmptype = ""
endif

if ($iinside == 'yes') then
  set iinsidetype = "_IINSIDE${iinside}"
else
  set iinsidetype = ""
endif

set buildname = ${arch}_omp${threading}${chunktype}${nztype}${translateitype}${fpmptype}${iinsidetype}
set objbase = src_${buildname}
set objdir = ${buildroot}/${objbase}
set runbase = run_${buildname}
set rundir = ${buildroot}/${runbase}
set toolsdir = ${objdir}/tools

if ( ! -d $objdir) then
  mkdir -p $objdir || echo "Failure from mkdir -p $objdir" && exit 1
endif

echo "Using buildroot = ${buildroot}. 'make' will be run in ${objdir}"
echo ""

# Create a script which can build NIM directly from the build directory
cat >! ${objdir}/makekernel_fromobj <<EOF
#!/bin/csh
source ./module_setup || echo "Failure to source ./module_setup"
make
exit 0
EOF
chmod 755 ${objdir}/makekernel_fromobj

if ( ! -d $rundir) then
  mkdir $rundir || echo "Failure from mkdir $rundir" && exit 1
endif

# Make objdir a full path, and rsync the source tree
set curdir = $cwd
cd $objdir
set objdir = $cwd

cd ${curdir}/.. || echo "Failure to cd ${curdir}/.." && exit 1

# -C says to ignore CVS stuff, which also means .svn/ dirs
set cmd = "rsync -auC src/ $objdir"
echo "Issuing cmd: $cmd ..."
time $cmd || echo "rsync 1 failure" && exit 1
echo "Done"

# Don't want "makekernel" to exist in objdir--use makekernel_fromobj instead
\rm -f ${objdir}/makekernel

set cmd = "rsync -au run/ $rundir"
echo "Issuing cmd: $cmd ..."
time $cmd || echo "rsync 2 failure" && exit 1
echo "Done"

cd $objdir || echo "Failure to cd $objdir" && exit 1

# Insert literal CHUNK values into chunkfilter.pl and chunk.h .  
set chunkfilter = "${toolsdir}/chunkfilter.pl"
cat >! ${chunkfilter} <<EOF
#!/usr/bin/perl -p
# insert literal chunk sizes
EOF
# Note that chunkfilter.pl will be a NOOP if $chunk is 'no'
# welcome to the joys of csh where one cannot echo "\$1 $chunkfilter"
if ($chunk != 'no') then
  echo -n 's/\\b(do\\s+\\d*\\s*\\w+\\s*=\\s*)ii*ts\\s*,\\s*ii*te\\b/$1 1,' >> ${chunkfilter}
  echo -n "${chunk}" >> ${chunkfilter}
  echo -n '/gi; ' >> ${chunkfilter}
  echo -n 's/\\bii*[mt]s\\s*:\\s*ii*[mt]e\\b/1:' >> ${chunkfilter}
  echo -n "${chunk}" >> ${chunkfilter}
  echo    '/gi;' >> ${chunkfilter}
endif
chmod a+x ${chunkfilter}
# Insert literal NZ values into literalkfilter.pl and literalk.h .  
set literalkfilter = "${toolsdir}/literalkfilter.pl"
# Note that literalkfilter.pl will be a NOOP if $nz is 'no'
cat >! ${literalkfilter} <<EOF
#!/usr/bin/perl -p
# insert literal vertical sizes
EOF
if ($nz != 'no') then
  # Note that kme=kte+1 in Esther's code to match MPAS behavior
  @ nzp1 = $nz + 1
  # do k = kts,kte
  echo -n ' s/\\b(do\\s+\\d*\\s*\\w+\\s*=\\s*)kk*ts\\s*,\\s*kk*te\\b/$1 1,' >> ${literalkfilter}
  echo -n "${nz}" >> ${literalkfilter}
  echo -n '/gi; ' >> ${literalkfilter}
  # do k = kte,kts,-1
  echo -n ' s/\\b(do\\s+\\d*\\s*\\w+\\s*=\\s*)kk*te\\s*,\\s*kk*ts\\b/$1 ' >> ${literalkfilter}
  echo -n "${nz}" >> ${literalkfilter}
  echo -n ',1/gi; ' >> ${literalkfilter}
  # do k = kts,kts+1
  echo -n ' s/\\b(do\\s+\\d*\\s*\\w+\\s*=\\s*)kk*ts\\s*,\\s*kk*ts\\b/$1 1,1/gi; ' >> ${literalkfilter}
  # do k = kte,kte-1
  echo -n ' s/\\b(do\\s+\\d*\\s*\\w+\\s*=\\s*)kk*ts\\s*,\\s*kk*te\\b/$1 ' >> ${literalkfilter}
  echo -n "${nz},${nz}" >> ${literalkfilter}
  echo -n '/gi; ' >> ${literalkfilter}
  # kte:kte, kkte:kkte
  echo -n 's/\\bkk*ts\\s*:\\s*kk*te\\b/1:' >> ${literalkfilter}
  echo -n "${nz}" >> ${literalkfilter}
  echo -n '/gi;' >> ${literalkfilter}
  # kms:kme, kkms:kkme
  echo -n 's/\\bkk*ms\\s*:\\s*kk*me\\b/1:' >> ${literalkfilter}
  echo -n "${nzp1}" >> ${literalkfilter}
  echo    '/gi;' >> ${literalkfilter}
endif
chmod a+x ${literalkfilter}
set chunkh = "${toolsdir}/chunk.h"
set literalkh = "${toolsdir}/literalk.h"
echo "" >! ${chunkh}
if ($chunk == 'no') then
  echo "#undef _CHUNK_" >> ${chunkh}
else
  echo "#define _CHUNK_ ${chunk}" >> ${chunkh}
endif
echo "" >! ${literalkh}
if ($nz == 'no') then
  echo "#undef _NZ_" >> ${literalkh}
else
  echo "#define _NZ_ ${nz}" >> ${literalkh}
endif

# Create macros.make based on these settings and the appropriate macros.make.* file
if ( ! -e macros.make.${arch} ) then
  echo "${thisscript}: macros.make.${arch} does not exist"
  exit 1
endif

echo "# Beginning of script-generated settings" >! macros.make
echo "ARCH      = $arch"      >> macros.make
echo "OPENMP    = $threading" >> macros.make
echo "CHUNK     = $chunk"     >> macros.make
echo "TRANSLATEI= $translatei">> macros.make
echo "FPMP      = $fpmp"      >> macros.make
echo "IINSIDE   = $iinside"   >> macros.make
echo "NZ        = $nz"        >> macros.make
echo "DEFINES   = "           >> macros.make
echo "CPP_FLAGS = "           >> macros.make
if ($chunk != 'no') then
  # remove Intel alignment directives if chunking is turned off
  echo "DEFINES += -DALIGN_OK" >> macros.make
endif
# path to chunk.h
echo "CPP_FLAGS += -I${toolsdir}" >> macros.make
if ($chunk == 'no' || $translatei == 'no') then
  # cat is a noop in this context
  # cat is used here for clarity when debugging build output
  echo "CHUNKCMD = cat" >> macros.make
else
  echo "CHUNKCMD = ${chunkfilter}" >> macros.make
endif
if ($nz == 'no') then
  # cat is a noop in this context
  # cat is used here for clarity when debugging build output
  echo "LITERALKCMD = cat" >> macros.make
else
  echo "LITERALKCMD = ${literalkfilter}" >> macros.make
endif
echo "# End of script-generated settings" >> macros.make
echo ""                       >> macros.make

# Append the appropriate already-existing macros.make.* file
echo "# Beginning of macros.make.${arch}" >> macros.make
cat macros.make.${arch} >> macros.make
echo "# End of macros.make.${arch}" >> macros.make
echo ""                       >> macros.make

# Append macros.make.all
echo "# Beginning of macros.make.all" >> macros.make
cat macros.make.all >> macros.make
echo "# End of macros.make.all" >> macros.make
echo ""                       >> macros.make

# Done creating macros.make
# Now create module_setup: arch and objdir settings are needed in batch environment
# even when "modules" aren't available

\rm -f module_setup

cat >! module_setup <<EOF
#!/bin/csh
set arch = $arch
set threading = $threading
set chunk = $chunk
set translatei = $translatei
set fpmp = $fpmp
set iinside = $iinside
set nz = $nz
set objdir = $objdir
EOF

# Module settings: 1st ones are for jet.
switch ($arch)
  case 'intel':
  cat >> module_setup <<EOF
  module purge
  module load intel/14.0.3
EOF
  breaksw
  case 'lahey':
  cat >> module_setup <<EOF
  module purge
  module load lahey/8.10b
EOF
  breaksw
  case 'pgi':
  cat >> module_setup <<EOF
  module purge
  module load pgi/12.5-0
EOF
  breaksw

  case 'titanintel':
  cat >> module_setup <<EOF
  (module list) |& grep -q PrgEnv-pgi  && module switch PrgEnv-pgi PrgEnv-intel
  (module list) |& grep -q PrgEnv-cray && module switch PrgEnv-cray PrgEnv-intel
EOF
  breaksw

  case 'titancray':
  cat >> module_setup <<EOF
  (module list) |& grep -q PrgEnv-pgi  && module switch PrgEnv-pgi PrgEnv-cray
  module load gcc
EOF
  breaksw

  case 'eosintel':
  cat >> module_setup <<EOF
# ASSUME PrgEnv-intel is loaded (that is the default on eos)
EOF
  breaksw

  # do not load modules on m1
  case 'm1intel':
  cat >> module_setup <<EOF
  # Enable Intel-based MIC cmds
  set path = ( /opt/intel/impi/4.1.1.036/intel64/bin $path /opt/intel/bin )
EOF
  breaksw

  # do not load modules on m2
  case 'm2intel':
  cat >> module_setup <<EOF
  # Enable Intel-based MIC cmds
  set path = ( /opt/intel/impi/4.1.1.036/intel64/bin $path /opt/intel/bin )
EOF
  breaksw

  # do not load modules on m1
  case 'm1xeonphi':
  cat >> module_setup <<EOF
  # Enable Intel-based MIC cmds
  set path = ( /opt/intel/impi/4.1.1/mic/bin $path /opt/intel/mic/bin )
EOF
  breaksw

  # do not load modules on m2
  case 'm2xeonphi':
  cat >> module_setup <<EOF
  # Enable Intel-based MIC cmds
  set path = ( /opt/intel/impi/4.1.1/mic/bin $path /opt/intel/mic/bin )
EOF
  breaksw

  # do not purge on yellowstone
  # ifort 13+ works best with Intel Inspector per Dan Nagle
  case 'ysintel':
  cat >> module_setup <<EOF
  module switch intel intel/13.1.2
EOF
  breaksw

  case 'zeusintel':
  cat >> module_setup <<EOF
  module purge
  module load intel/13.0.079
EOF
  breaksw

  case 'zeuslahey':
  cat >> module_setup <<EOF
  module purge
  module load lahey/8.1.2b
EOF
  breaksw

  # ifort-12.1 (sjet default)
  case 'sjetintel':
  cat >> module_setup <<EOF
  module purge
  module load intel/14.0.3
EOF
  breaksw

  # tacc host: 
  case 'tacc':
  cat >> module_setup <<EOF
EOF
  breaksw

  # tacc xeonphi: 
  case 'taccxeonphi':
  cat >> module_setup <<EOF
EOF
  breaksw

  # Endeavor: no modules
  case 'endeavorintel':
  cat >> module_setup <<EOF
  source ${objdir}/endeavor/sourceMe.csh
EOF
  breaksw

  # Endeavor: no modules
  case 'endeavorhswep':
  cat >> module_setup <<EOF
  source ${objdir}/endeavor/sourceMe.csh
EOF
  breaksw

  # Endeavor: no modules
  case 'endeavorxeonphi':
  cat >> module_setup <<EOF
  source ${objdir}/endeavor/sourceMe.csh MIC
EOF
  breaksw

# If we get here, there is a bug in the script. Probably a new "arch" entry is needed.
  default:
  echo "${thisscript}: arch=$arch is unknown" && exit 1
endsw

# Done creating module_setup

if ($threading == 'yes') then
  if ($arch == 'lahey' || $arch == 'zeuslahey') then
    echo "ERROR: OpenMP not supported with the Lahey compiler."
    exit 1
  endif
endif

# This file need to remain as is--do not edit
chmod 444 module_setup

# Copy module_setup to $rundir so jetsub will know module settings and $objdir
/bin/cp -f module_setup $rundir || echo "failure to copy module_setup" && exit 1

# Source module_setup and run make

cd $objdir || echo "Failure to cd $objdir" && exit 1
echo "Sourcing module_setup..."
source ./module_setup
echo "Done"

echo "Starting make ..."
env BINDIR="$objdir/bin" make all || echo "make failure" && exit 1
echo "make succeeded" 
echo ""
echo "Run scripts are in:"
echo "  $rundir"

# link binaries to run directory
# use relative paths to allow relocation of entire working copy
set curdir = $cwd
cd ${rundir} || echo "Failure to cd to ${rundir}" && exit 1
ln -sf ../${objbase}/bin/* . || echo "Failure to link binaries to ${rundir}" && exit 1
cd ${curdir} || echo "Failure to cd ${curdir}" && exit 1

# print message about likely run script for chosen $arch
echo "Run script is:"
echo -n "  "
if ($arch == 'intel' || $arch == 'lahey' || $arch == 'pgi') then
  echo "jetsub"
else if ($arch == 'sjetintel') then
  echo "sjetsub"
else if ($arch == 'm1intel' || $arch == 'm2intel') then
  echo "m1m2sub.host"
else if ($arch == 'm1xeonphi' || $arch == 'm2xeonphi') then
  echo "m1m2sub.mic.serial"
else if ($arch == 'endeavorintel' || $arch == 'endeavorhswep') then
  echo "endeavorsub.host.serial"
else if ($arch == 'endeavorxeonphi') then
  echo "endeavorsub.mic.serial"
else if ($arch == 'ysintel') then
  echo "yssub"
else if ($arch == 'zeusintel' || $arch == 'zeuslahey') then
  echo "zeussub"
else
  echo "unknown"
endif

#echo "To re-execute this build execute: $thisscript arch=$arch threading=$threading chunk=$chunk nz=$nz translatei=$translatei fpmp=$fpmp iinside=$iinside buildroot=$buildroot"

exit 0

