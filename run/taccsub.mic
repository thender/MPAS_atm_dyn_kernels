#!/bin/csh
#
#  Usage: taccsubnim.mic [queue=<normal-mic|development>]
#                        [micbld=<parallel|serial>] \
#                        [omp_schedule=<static|guided>]

if ($#argv > 0) then
  if ($argv[1] == "-h") then
    echo "Usage: $0 [queue=<normal-mic|normal-2mic|development>] [micbld=<serial|parallel>]"
    exit 0
  endif
endif
set validqueue = (normal-mic normal-2mic development)
set validmicbld = (parallel serial)
set validomp_schedule = (static guided)

# Sourcing module_setup will set local variables $arch, $hw, $par, and $objdir
# If modules are enabled (e.g. jet, jaguar), it will also run the appropriate 
# "module" commands.
if ( -e ./module_setup) then
  source ./module_setup || echo "Failure from source ./module_setup" && exit 1
else
  echo "File ${cwd}/module_setup does not exist!" && exit 1
endif

# Set variable defaults.
set jobname = "nim"

# Parse args if present. First initialize to default values
set queue = $validqueue[1]
set micbld = $validmicbld[1]
set omp_schedule = $validomp_schedule[1]
while ($#argv)
# Throw away what comes after "=" to get the key
  set key = `echo $1 | sed 's/=.*$//'`
# Throw away what comes before "=" to get the value
  set val = `echo $1 | sed 's/.*=//'`
  if ($key == "" || $val == "") then
    echo "Cannot parse arg list. Usage:$0 [queue=<queue_name>]"
    exit 1
  endif
  if ($key != "queue" && $key != "micbld" && $key != "omp_schedule") then
    echo "key=value not found or LHS of = must be one of queue micbld omp_schedule"
    exit 1
  endif

# Check validity of input. Csh lack of functions is a real liability here
  if ($key == "queue") then
    set validopts = ($validqueue)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown queue: Need queue=[one of: $validqueue]"
      exit 1
    endif
  else if ($key == "micbld") then
    set validopts = ($validmicbld)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown micbld: Need micbld=[one of: $validmicbld]"
      exit 1
    endif
  else if ($key == "omp_schedule") then
    set validopts = ($validomp_schedule)
    while ($#validopts)
      if ($val == $validopts[1]) then
        break
      endif
      shift validopts
    end
    if ($#validopts == 0) then
      echo "$val is an unknown omp_schedule: Need omp_schedule=[one of: $validomp_schedule]"
      exit 1
    endif
  endif
  eval "set $key = $val"
  shift argv
end
echo "micbld=$micbld"
echo "omp_schedule for mic=$omp_schedule"

if ($hw == 'gpu') then
  echo "Cannot run gpu build at TACC" && exit 1
endif

# Set namelist-based variables.
set GLVL          = `${objdir}/bin/GetGLVL`         || echo "$GetGLVL failed" && exit 5
set NZ            = `${objdir}/bin/GetNZ`           || echo "$GetNZ failed" && exit 5
set PHYSICS       = `${objdir}/bin/GetPhysics`      || echo "$GetPhysics failed" && exit 5
set compute_tasks = `${objdir}/bin/GetComputeTasks` || echo "$GetComputeTasks failed" && exit 2
set DATADIR       = `${objdir}/bin/GetPath`         || echo "$GetPath failed" && exit 5

set GFSDATADIR=${DATADIR}/SFCDAT
set FV3DATADIR=${DATADIR}/FV3DAT
set ATMDATADIR=${DATADIR}/ATMDAT

# Get Restart Information
set RESTARTDIR = `${objdir}/bin/GetRestart | grep "RestartDir:" | sed 's/^.*://'` || \
        echo "Cannot get RestartDir" && exit 5
set RESTARTBEGIN = `${objdir}/bin/GetRestart | grep "RestartBegin:" | sed 's/^.*://'` || \
        echo "Cannot get RestartBegin" && exit 5
if ($RESTARTBEGIN < 0) then
  echo "namelist setting for RestartBegin not found" && exit 5
endif

set taskinfoscript = "taskinfo.csh"
set taskinfofile = "taskinfo.yaml"
source ./${taskinfoscript} || echo "${taskinfoscript} failed" && exit 1

set rundir = "G${GLVL}_K${NZ}_${PHYSICS}_P${compute_tasks}_${$}"
mkdir $rundir || echo "mkdir $rundir failed" && exit 1
echo "Made directory: $rundir"

cp *namelist* $rundir
mv $taskinfofile $rundir
cp task_info_unit_tests* $rundir
cp module_setup $rundir
cp ${objdir}/bin/* $rundir
cd $rundir

# prepare input data sets for NIM model run
if ($RESTARTBEGIN != 0) then
echo "RestartDir: $RESTARTDIR"
ln -fs ../${RESTARTDIR}/rst_* .
foreach fn (rst_*)
mv $fn old.${fn:r}
end
endif
# Make rundir a full path for runscript
set rundir = $cwd

set GLVL = `printf "%02d" $GLVL`
set NZ   = `printf "%03d" $NZ`
set PTstdFile = STD_G${GLVL}K${NZ}.txt
set g3dFile   = G3D_G${GLVL}K${NZ}.dat
set amxFile   = AM_G${GLVL}K${NZ}.dat
set sstFile   = SST0_G${GLVL}.txt
set iniFile   = ini_G${GLVL}K${NZ}.dat

#/bin/ln -s $DATADIR/$PTstdFile STD.txt 
#/bin/ln -s $DATADIR/$g3dFile   g3d.dat
#/bin/ln -s $DATADIR/$amxFile   amx.dat
#/bin/ln -s $DATADIR/$sstFile   sst.txt
#/bin/ln -s $DATADIR/$iniFile   ini.dat
/bin/ln -s $GFSDATADIR/gfsfc_G${GLVL}.dat  gfsfc.dat
/bin/ln -s $FV3DATADIR/$PTstdFile STD.txt 
/bin/ln -s $FV3DATADIR/$g3dFile   g3d.dat
/bin/ln -s $FV3DATADIR/$amxFile   amx.dat
/bin/ln -s $FV3DATADIR/$sstFile   sst.txt
/bin/ln -s $ATMDATADIR/$iniFile   ini.dat

# MPAS read_unit
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/LANDUSE.TBL fort.15
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/RRTMG_SW_DATA RRTMG_SW_DATA
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/RRTMG_LW_DATA RRTMG_LW_DATA
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/VEGPARM.TBL VEGPARM.TBL
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/SOILPARM.TBL SOILPARM.TBL
/bin/ln -s ${objdir}/physics/mpas/physics_wrf/files/GENPARM.TBL GENPARM.TBL

set queue_time = `./GetQueueTime`
if ($status != 0) then
  echo "$GetQueueTime failed"
  exit 3
endif

if ($queue == normal-2mic) then
  @ host_mpi_tasks = $total_nodes * $max_compute_tasks_per_mic * 2
else
  @ host_mpi_tasks = $total_nodes * $max_compute_tasks_per_mic
endif

cat << EOF >! runscript
#!/bin/csh
#SBATCH -J KNC_job     # Job name
#SBATCH -p $queue            # Queue name
#SBATCH -N $total_nodes      # Total number of nodes requested (16 cores/node)
#SBATCH -n $host_mpi_tasks   # Total number of host mpi tasks requested
#SBATCH -t $queue_time       # Run time (hh:mm:ss)
# The next line is required if the user has more than one project
##SBATCH -A A-yourproject   # Allocation name to charge job against

# These settings from John M. still fail for 1 rank per MIC
setenv I_MPI_MIC 1
setenv I_MPI_PIN_MODE 1
setenv I_MPI_PIN_DOMAIN auto

# Set OMP scheduling metric (default is static)
setenv OMP_SCHEDULE $omp_schedule
setenv MIC_OMP_SCHEDULE $omp_schedule

# These settings still fail G5K96 1 task on MIC. Requires 4 tasks to work.
setenv MIC_STACKSIZE 4G

# magic stack size settings
setenv OMP_STACKSIZE 64M
setenv MIC_OMP_STACKSIZE 64M

# This affinity seems to work the best
#setenv KMP_AFFINITY granularity=fine,compact,verbose
setenv MIC_KMP_AFFINITY granularity=fine,compact,verbose

# Set the number of MPI TASKS per MIC
if ($queue == normal-2mic) then
  @ mic_ppn = $max_compute_tasks_per_mic
  setenv MIC_PPN \$mic_ppn
  @ mic_my_nslots = \$mic_ppn * 2 * $total_nodes
  setenv MIC_MY_NSLOTS \$mic_my_nslots
else
  setenv MIC_PPN $max_compute_tasks_per_mic
endif

# Set the number of host threads per task
setenv OMP_NUM_THREADS $omp_threads_per_compute_task

# Set the number of mic threads per task
setenv MIC_OMP_NUM_THREADS $omp_threads_per_mic_mpi_task

echo "runscript is starting up in directory `pwd`"
source ./module_setup || echo "Failure from source ./module_setup" && exit 1
# This module cmd will fail on machines without modules
module list

# Launch the symmetric application using ibrun.symm
if ($queue == normal-2mic) then
  set micarg = -2
else
  set micarg = -m
endif
set cmd = "ibrun.symm \$micarg ../../src_taccxeonphi_cpu_${micbld}_ompyes_CHUNK8/bin/nim"

echo "running \$cmd" >! stdout
echo "OMP_NUM_THREADS=\$OMP_NUM_THREADS" >> stdout
echo "MIC_PPN=\$MIC_PPN" >> stdout
echo "MIC_OMP_NUM_THREADS=\$MIC_OMP_NUM_THREADS" >> stdout
echo "MIC_OMP_SCHEDULE=\$MIC_OMP_SCHEDULE" >> stdout
(\$cmd) >> stdout

if (\$status == 0) then
  echo nim finished
else
  echo nim failed
  exit 23
endif
exit 0
EOF
chmod 755 ./runscript

echo "Submitting job to queue $queue"
echo "compute tasks host:  $host_mpi_tasks"
echo "compute tasks MIC:   $max_compute_tasks_per_mic"
echo "total MPI tasks:     $compute_tasks"
echo "node request:        $total_nodes"
echo "host nthreads:       $omp_threads_per_compute_task"
echo "MIC nthreads:        $omp_threads_per_mic_mpi_task"

set SUBCMD="sbatch"
set tries=1
while ( $tries > 0 )
  set JOBID=`$SUBCMD ./runscript`
  if ( $? == 0 ) then
    echo "The job $JOBID has been submitted."
    exit 0
  endif
  echo "Retrying $SUBCMD"
  @ tries = $tries - 1
end
echo "$SUBCMD failed."
exit 1
